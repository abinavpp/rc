#! /bin/bash

run_mode="" # run type (dry or nothing)

function print_usage {
cat <<ENDCAT
You should be using a wrapper unless you know what you're doing.
Usage : treesync [EXTRA_OPTIONS] -s <tree> -f <from> -t <to>

Options :
-s : tree directory
-f : syncing from directory
-t : syncing to directory
-d : dry run (Always do this first!)
-c : view diff (this too!)

Brief:
The tree-dir forms the hierarchy of files which would be the <tree> for
synchronization from <from> to <to>

Examples:
To "sync in" your home:
  treesync -s home/abinav -f /home/abinav -t repo/home/abinav
To "sync out" your home:
  treesync -s home/abinav -f repo/home/abinav -t /home/abinav

ENDCAT
}

function die {
  echo "$@" 1>&2
  exit 0
}

function sanitize_path_string {
  local dir=`echo $1 | tr -s /`

  if [[ $dir == '/' ]]; then
    echo -n '/'
    return
  fi

  echo -n $dir | sed 's:/$::' # remove the trailing /
}

function tree_sync {
  if [[ $# -ne 3 ]]; then
    die "tree_sync() must be called with exactly 3 args"
  fi

  local dir_tree="$1" dir_from="$2" dir_to="$3"

  if [[ ! -d $dir_tree || ! -d $dir_from || ! -d $dir_to ]]; then
    print_usage; exit
  fi

  local tree_root_len=`echo -n "$dir_tree" | wc -c`

  local files_tree=(`find $dir_tree -type f -print |  \
    cut -c1-$(($tree_root_len + 1)) --complement `)

  local f
  for f in ${files_tree[@]}; do
    if [[ $run_mode == "dry" ]]; then
      echo "mkdir -p `dirname ${dir_to}/$f`"
      echo "cp -v ${dir_from}/$f `dirname ${dir_to}/$f`"

    elif [[ $run_mode == "diff" ]]; then
      echo "diff ${dir_from}/$f ${dir_to}/$f"
      diff ${dir_from}/$f ${dir_to}/$f

    else
      # $f can be a x/y/file so get dirname with it
      mkdir -p `dirname ${dir_to}/$f`
      cp -v ${dir_from}/$f `dirname ${dir_to}/$f`
    fi
  done
}

while getopts "hcds:f:t:" opt
do
  case "$opt" in
  c) run_mode="diff";;
  d) run_mode="dry";;
  h)  print_usage
    exit;;
  s) tree=$OPTARG;;
  f) from=$OPTARG;;
  t) to=$OPTARG;;
  ?)  print_usage
    exit;;
  esac
done

if [[ $tree == "" || $from == "" || $to == "" ]]; then
  print_usage; exit 1
fi

tree=`sanitize_path_string $tree`
from=`sanitize_path_string $from`
to=`sanitize_path_string $to`

if [[ ! -d $tree || ! -d $from || ! -d $to ]]; then
  print_usage; exit 1
fi

echo "[UID:$UID] Running: treesync -s $tree -f $from -t $to"
tree_sync $tree $from $to
