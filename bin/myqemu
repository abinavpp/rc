#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

sub kvm {
  if (system('lsmod | grep kvm &> /dev/null') == 0) {
    return " -enable-kvm -cpu host -machine q35,accel=kvm";
  } else {
    return " -cpu max -machine q35";
  }
}

sub net {
  return " -net nic,model=virtio -net user";
}

sub drive {
  my ($format, $file) = @_;
  return " -drive format=$format,file=$file";
}

sub gpu {
  return " -vga virtio";
}

sub mem {
  my ($perc) = (@_);
  my $mem = (`cat /proc/meminfo |  grep "MemTotal" | awk '{print \$2}'`);
  return " -m " . int (int ($mem / 1024) * ($perc / 100)). "M";
}

sub smp {
  my ($perc) = (@_);
  my $nproc = (`nproc`); chomp($nproc);
  return " -smp " . int(int ($nproc) * ($perc / 100));
}

sub virtfs {
  my ($paths) = (@_);
  my $ret = "";

  my $i = 0;
  foreach my $path (@$paths) {
    $ret .= " -virtfs local,path=$path,mount_tag=host$i,security_model"
      . "=passthrough,id=host$i ";
    $i++;
  }
  return $ret;
}

sub boot_cd {
  my ($file) = (@_);
  return " -cdrom $file -boot once=d";
}

GetOptions(
  'dry' => \my $dry,
  'p=i' => \my $prof,
  'c=s' => \my $cd,
  'd=s' => \my $drv) or die;

die unless (defined $drv);

my $cmd = "qemu-system-x86_64" . kvm . net . gpu . drive("raw", $drv)
  . ' ' . join (' ', @ARGV);

if (defined $cd) {
  $cmd .= boot_cd($cd);
}

if (defined $prof and $prof =~ /[0-9]+/) {
  $cmd .= smp(int($prof)) . mem(int($prof));
}

print "$cmd\n";
system($cmd) unless $dry;
