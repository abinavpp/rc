#! /usr/bin/perl

use strict;
use warnings;

use Term::ANSIColor;
use Getopt::Long;
use feature qw(say);

sub in_array {
  my ($arr, $search_for) = @_;
  my %items = map {$_ => 1} @$arr;
  return (exists($items{$search_for})) ? 1 : 0;
}

sub pacbatch_get_filtered_list {
  my ($path_pacbatch_db, @pacbatch_labels) = @_;
  my @ret;

  open(my $fh_pacbatch_db, "<", $path_pacbatch_db) ||
  die("Can't open $path_pacbatch_db");
  while (my $line = <$fh_pacbatch_db>) {
    if ($line =~ /^#/ || $line =~ /^\s*$/) {
      next;
    }
    $line =~ s/#.*//g;
    $line =~ s/^\s.+//g;

    my @words = split(/\s+/, $line);
    if (in_array(\@pacbatch_labels, $words[0])) {
      push(@ret, @words[1..$#words]);
    }
  }

  return @ret;
}

sub pacman_is_in_repo {
  my ($pkg) = @_;
  my $is_pkg = system("pacman -Si $pkg &> /dev/null");
  my $is_group = system("pacman -Sg $pkg &> /dev/null");
  return !$is_pkg || !$is_group;
}

sub pacman_is_in_sys {
  my ($pkg) = @_;
  my $is_pkg = system("pacman -Qi $pkg &> /dev/null");
  my $is_group = system("pacman -Qg $pkg &> /dev/null");
  return !$is_pkg || !$is_group;
}

sub pacbatch_list_verify_S {
  my ($pacbatch_list) = @_;

  for (my $i = 0; $i < scalar @$pacbatch_list; $i++) {
    my $pacbatch_pkg = @$pacbatch_list[$i];
    if (!pacman_is_in_repo($pacbatch_pkg)) {
      die "$pacbatch_pkg NOT in arch repo\nTerminating ...\n";
    } else {
      print "$pacbatch_pkg in arch repo ";
      if (pacman_is_in_sys($pacbatch_pkg)) {
        print color('red');
        print "(in system, removing from batch)\n";
        splice (@$pacbatch_list, $i--, 1);
      } else {
        print color('green');
        print "(NOT in system, to be installed)\n";
      }
      print color('reset');
    }
  }
}

sub usage() {
  say
  'Usage: pacbatch -d <path> -o <path> [-S] profile-1 [profile-2]*
  Dumps a space-delimited text file with package names as per the cmdline.
  You can feed the output to pacman.

  Options:
  -o <path>   path to output file
  -d <path>   path to database
  -S          to verify or not
  -help       duh
  ';
}

GetOptions(
  "o=s" => \my $path_pacbatch_out,
  "d=s" => \my $path_pacbatch_db,
  "S" => \my $pacman_S,
  "help" => \my $opt_help)

  or die "Error parsing cmdline";

if ($opt_help || !defined $path_pacbatch_db  || !defined $path_pacbatch_out) {
  usage();
  exit;
}

if (!defined $ARGV[0]) {
  print STDERR "Error: label(s) not specified\n";
  usage();
  exit;
}

my @pacbatch_labels = @ARGV;

my @pacbatch_filtered_list = pacbatch_get_filtered_list($path_pacbatch_db, @pacbatch_labels);

if ($pacman_S) {
  pacbatch_list_verify_S(\@pacbatch_filtered_list);
}

system("echo @pacbatch_filtered_list > $path_pacbatch_out");
