defaults.ctl.card 1

pcm.!default {
  type asym

  playback.pcm {
    type plug
    slave.pcm "dmixer"
    # slave.pcm "dmixer_zoomg5"
    # slave.pcm "hw_plain"
    # slave.pcm "plugequal"
  }

  capture.pcm {
    type plug
    slave.pcm "usb"
  }
}

pcm.usb {
  type hw
  card PCH
}

pcm.dmixer {
  type dmix
  ipc_key 1024

  slave {
    pcm "hw:1"
  }
}

pcm.dmixer_zoomg5 {
  type dmix
  ipc_key 1024

  slave {
    pcm "hw:2"
  }
}



# unused section
# ==============
pcm.ladamp {
  type ladspa
  slave.pcm "lad_se4"
  path "/usr/lib/ladspa/"
  plugins [{
    label amp
    input {
      controls [ 20 ]
    }
  }]
}

pcm.ladcomp {
  type plug
  slave.pcm "lad_dys"
  # slave.pcm "lad_se4"
}

# For eq (see below)
# ctl.lad_sys {
#   type equal
#   library "/usr/lib/ladspa/dyson_compress_1403.so"
#   module "dysonCompress"
# }

pcm.lad_dys {
  type ladspa
  slave.pcm "lad_fll"
  path "/usr/lib/ladspa"
  plugins [{
    label dysonCompress
    input {
      #peak limit, release time, fast ratio, ratio
      controls [0 1 0.5 0.99]
    }
  }]

  # if you want to "eq" in realtime
  # type equal
  # slave.pcm "ladspa:ladcomp_limiter"
  # slave.pcm "plug:dmixer"
  # library "/usr/lib/ladspa/dyson_compress_1403.so"
  # module "dysonCompress"
}

pcm.lad_fll {
  type ladspa
  slave.pcm "plug:dmixer"
  path "/usr/lib/ladspa"
  plugins [{
    label fastLookaheadLimiter
    input {
      #InputGain(Db) -20 -> +20 ; Limit (db) -20 -> 0 ; Release time (s) 0.01 -> 2
      controls [ 20 0 0.8  ]
    }
  }]
}

pcm.lad_se4 {
  type ladspa
  slave.pcm "plug:dmixer"
  path "/usr/lib/ladspa"
  plugins [{
    label se4
    input {
      # controls array: [RMS/peak, attac time(ms), release time (ms), threshold (dB),
      #   ratio, knee radius, attenuation]
      controls  [0.7 30 550 -25 6.5 6 0]
    }
  }]
}

ctl.lad_sc4m {
  type equal
  library "/usr/lib/ladspa/sc4m_1916.so"
  module "sc4m"
}

pcm.lad_sc4m {
  type ladspa
  slave.pcm "plug:dmixer"
  library "/usr/lib/ladspa/sc4m_1916.so"
  module "sc4m"
}

pcm.hw_plain {
  type hw
  card 1
}

pcm.dmix_plain {
  type plug
  slave {
    pcm "dmix"
  }
}

pcm.plugequal {
  type equal

  # yes you need to prefix plug: since type equal
  slave.pcm "plug:dmixer"
}

ctl.equal {
  type equal
}

pcm.softvol {
  type softvol
  slave {
    pcm "dmixer"
  }

  control {
    name "Pre-Amp"
    card 1
  }

  min_dB -5.0
  max_dB 20.0
  resolution 6
}

# vim:set ft=alsaconf:
