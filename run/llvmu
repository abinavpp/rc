#! /bin/bash

if [[ -z $LLVM_DEV ]]; then
	echo "Set your \$LLVM_DEV and try again"
	exit 1
fi

# default output files
clang_out="clang.ll"
opt_out="opt.ll"
dot_out="dot.ll"

function try_llvmb() {
  prof=$1; shift
	llvmb $prof "$@" || exit 1;
}

function is_ll() {
	if [[ ${1: -3} == ".ll" ]]; then # _space_ b/w : and -
		return 0;
	fi
	return 1;
}

function get_ll() {
  prof=$1 file="$2"
	if is_ll $file; then
		echo "$file";
		return
	fi

  llvmr $prof clang -S -emit-llvm -Xclang -disable-O0-optnone -o \
    "$clang_out" "$file" || exit 1
	
	echo "$clang_out";
}

function get_ll_for_dot() {
  prof=$1 file="$2"
	if is_ll $file; then
		ll="$file";
	else
		get_ll $prof "$file" &> /dev/null
		llvmr $prof opt -mem2reg -loop-simplify -instcombine -instnamer \
			-indvars -S -o "$dot_out" "$clang_out" || exit 1;
		ll="$dot_out"
	fi
	echo $ll;
}

# To view cfg, dom dot files and clean up whatever used:
#
# do_llvmdot func-name-fragment path/ views function in path/
# do_llvmdot * path/ views all functions in path/
# 
# To cleanup all llvm dot files in path/
# do_llvmdot -c path/
function do_llvmdot {
	if [[ $1 == "-c" ]]; then
		rm $2/mf*.dot &> /dev/null
		rm $2/cfg*.dot &> /dev/null
		rm $2/dom*.dot &> /dev/null
		return
	fi

	# the order here should match the output pdf
	local dots=""
	if ls $2/cfg*$1*.dot &> /dev/null; then
		dots="$2/cfg*$1*.dot "
	fi

	if ls $2/mf*$1*.dot &> /dev/null; then
		dots+="$2/mf*$1*.dot "
	fi

	if ls $2/dom*$1*.dot &> /dev/null; then
		dots+="$2/dom*$1*.dot "
	fi

	if [[ -n $dots ]]; then
		vdot "$dots";
	else
		return 1;
	fi

	rm $dots;
	return 0;
}

function do_mir {
  prof="$1"; shift
	ll=$(get_ll $prof "$1") || exit 1
	shift;

	if [[ $# -eq 0 ]]; then
		llvmr $prof llc "$ll" 2>&1
		return
	fi

	if [[ $1 == "ab" || $1 == "ba" ]]; then
		# llvmu mir foo.c ab/ba <pass>
		vimdiff <(llvmr $prof llc -print-before=$2 "$ll" 2>&1) \
			<(llvmr $prof llc -print-after=$2 "$ll" 2>&1)
		return
	fi

	local first_print_cmd="" second_print_cmd=""
	local first_stop_cmd=""

	if [[ $1 == "b" ]]; then
		first_print_cmd="-print-before=$2"
		first_stop_cmd="-stop-before=$2"
	elif [[ $1 == "a" ]]; then
		first_print_cmd="-print-after=$2"
		first_stop_cmd="-stop-after=$2"
	elif [[ $1 == "all" ]]; then
		# llvmu mir foo.c all
        llvmr $prof llc -print-machineinstrs "$ll" 2>&1
		return
	fi
	
	if [[ $# -eq 2 ]]; then
		# llvmu mir foo.c b/a <pass>
        llvmr $prof llc $first_print_cmd "$ll" 2>&1
		return
	fi

	if [[ $3 == "b" ]]; then
		second_print_cmd="-print-before=$4"
	elif [[ $3 == "a" ]]; then
		second_print_cmd="-print-after=$4"
	fi

	# llvmu mir foo.c b/a <pass1> b/a <pass2>
    vimdiff <(llvmr $prof llc $first_print_cmd "$ll" 2>&1) \
        <(llvmr $prof llc $second_print_cmd "$ll" 2>&1)
}

# try non-dir-based-profiles first where $1 is profile
if [[ $1 == "dot" ]]; then
  prof="main"
	shift
	if [[ $# -eq 0 ]]; then # try all fn in /tmp
        do_llvmdot "*" "/tmp"
		exit;
	fi

	if [[ ! -e $1 ]]; then # try $1 fn in /tmp
        do_llvmdot "$1" "/tmp"
        do_llvmdot -c "/tmp" # if there are other dots in /tmp
		exit;
	fi

	# try in currdir
	ll=$(get_ll_for_dot $prof $1) || exit 1;
  # we need to prefix the cfg from llvm >= 8 to conform with llvm <= 7 std.
  llvmr $prof opt -dot-cfg -cfg-dot-filename-prefix="cfg" $ll
	llvmr $prof opt -dot-dom $ll

	if [[ $# -eq 2 ]]; then
        do_llvmdot "$2" "."
	else
        do_llvmdot "*" "."
	fi

	# if we generated an ll then remove it.
	if [[ $ll == $dot_out ]]; then
		rm $ll
	fi

	# In case of
	# llvmu dot foofunc has_foo_bar_zee_func.c
  do_llvmdot -c "."

elif [[ $1 == "scev" ]]; then
  prof="main"
	shift
	ll=$(get_ll $prof "$1") || exit 1;
	llvmr $prof opt -mem2reg -S -o "$clang_out" "$ll"
	llvmr $prof opt -analyze -scalar-evolution "$clang_out"

elif [[ $1 == "mod" ]]; then
  prof="main"
	shift
	/usr/bin/clang++ -g `llvmr $prof llvm-config --cxxflags --ldflags --system-libs \
		--libs core mc x86` $1
  if [[ $? == 0 ]]; then
    llvmr $prof a.out &> clang.ll
  fi

elif [[ $1 == "ir" ]]; then
  prof="main"
	shift
	get_ll $prof "$1" &> /dev/null || exit 1;
  llvmr $prof opt -mem2reg -loop-simplify -instcombine -instnamer \
    -indvars -S -o "$clang_out" "$clang_out" || exit 1;


elif [[ $1 == "mir" ]]; then
  prof="main"
	shift;
  do_mir $prof "$@"

else
  exit 1
fi
