#! /usr/bin/perl

use strict;
use warnings;

sub qemucl_sane_local_virtfs {
  my ($paths) = (@_);
  my $ret = "";

  my $i = 0;
  foreach my $path (@$paths) {
    $ret .= " -virtfs local,path=$path,mount_tag=host$i,security_model"
      . "=passthrough,id=host$i ";
    $i++;
  }
  return $ret;
}

sub qemucl_sane_kvm {
  if (system('lsmod | grep kvm &> /dev/null') == 0) {
    return " -enable-kvm -cpu host -machine q35,accel=kvm ";
  } else {
    return " -cpu max -machine q35 ";
  }
}

sub qemucl_sane_net {
  # -net vlan got deprecated from 2.9.0
  # return " -net nic,vlan=0,model=virtio -net user,vlan=0i ";

  return " -net nic,model=virtio -net user ";
}

sub qemucl_drive {
  my ($format, $file) = @_;
  return " -drive format=$format,file=$file ";
}

sub qemucl_sane_gpu {
  # return " -vga std ";

  # virtio gives better resolution
  return " -vga virtio ";
}

sub qemucl_sane_mem {
  my $mem = (`cat /proc/meminfo |  grep "MemTotal" | awk '{print \$2}'`);
  $mem = $mem / (1024 * 1024);

  if ($mem > 8) {
    return " -m 2048 ";
  } elsif ($mem > 4) {
    return " -m 1024 ";
  } else {
    return " -m 128 ";
  }
}

sub qemucl_sane_smp {
  my $nproc = (`nproc`);

  if ($nproc == 1) {
    return " -smp 1 ";
  } else {
    return " -smp " . $nproc / 2;
  }
}

if (scalar @ARGV != 2) {
  die "Error: Invalid cmdline";
}

my $profile = $ARGV[0];
my $path_vm = $ARGV[1];

if ($profile eq "usual") {
  my @virtfs_dirs = ();

  my $cmd = "qemu-system-x86_64 " . qemucl_sane_smp . qemucl_sane_mem
    . qemucl_sane_kvm . qemucl_sane_net . qemucl_sane_gpu
    . qemucl_sane_local_virtfs(\@virtfs_dirs) . qemucl_drive("raw", $path_vm)
  ;

  print "Running: $cmd\n";
  system($cmd);
  exit;
}
