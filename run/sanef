#! /bin/bash

function _find_prunestr {
	for i in $@; do
		echo -n " -path \"$i\" -prune -o "
	done
}

# Usage eg: sanef /home -cmin -1 -iname "*.o"
function sanef {
	local argc=$# # to be used after shift
	if [[ $argc -lt 1 ]]; then
		return
	fi
	if [[ ! -d $1 ]]; then
		return
	fi

	local path=$(readlink -f $1) # path must be absolute

	local cmdline="find $path -xdev -regextype posix-egrep "
	cmdline="$cmdline $(_find_prunestr \
		/boot /dev /proc /run /sys /tmp) "

	shift
	# prunes are ORed with -o, so we must have a trailing exp(s)
	if [[ $argc -eq 1 ]]; then
		cmdline="$cmdline -name \"*\"" # match everything
	else
		cmdline="$cmdline $@"
	fi

	sudo $cmdline
	# ${SHELL} -c "sudo $cmdline" # I hate bash quotes
}

# see more @ bash headaches.
set -f
# uncomment the above line for a messy situation! see below,
# The P vs NP of bash, run :
# sanef / -iname "*sh*" # in a dir with only one file called sh.sh
# The sanef() expands it if you were to exec "sudo $cmdline". I hope this
# is fixed by running sudo $cmdline without quotes. This is a serious mess.
# Dig deep when you get the time.

sanef $@
